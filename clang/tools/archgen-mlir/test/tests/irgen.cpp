// NOTE: Assertions were partially autogenerated by
// ./llvm/utils/update_cc_test_checks.py and
// ./mlir/utils/generate-test-checks.py

// RUN: %clangxx -c -std=c++17 -fplugin=%archgen_plugin %s -mllvm --archgen-mlir-stop-at-approx -mllvm --archgen-mlir-mlir-output=%t.mlir -mllvm --archgen-mlir-dont-link-mlir -S -emit-llvm -o %t.ll
// RUN: FileCheck --check-prefix=CHECK-MLIR --input-file=%t.mlir %s
// RUN: FileCheck --check-prefix=CHECK-LLVMIR --input-file=%t.ll %s
// notsupported at the time reenable when later %clangxx -std=c++17 -mllvm --archgen-mlir-stop-at-approx -fplugin=%archgen_plugin %s -o %t.out

#include "archgen.h"

// CHECK-LLVMIR-LABEL: @_Z4testN10archgenlib11FixedNumberINS_11FixedFormatILi4ELin5EiEEEE(
// CHECK-LLVMIR-NEXT:  entry:
// CHECK-LLVMIR-NEXT:    [[X:%.*]] = alloca %"struct.archgenlib::FixedNumber", align 2
// CHECK-LLVMIR-NEXT:    [[OUT:%.*]] = alloca %"struct.archgenlib::FixedNumber.0", align 1
// CHECK-LLVMIR-NEXT:    [[COERCE_DIVE:%.*]] = getelementptr inbounds %"struct.archgenlib::FixedNumber", %"struct.archgenlib::FixedNumber"* [[X]], i32 0, i32 0
// CHECK-LLVMIR-NEXT:    [[COERCE_VAL_II:%.*]] = trunc i16 [[X_COERCE:%.*]] to i10
// CHECK-LLVMIR-NEXT:    store i10 [[COERCE_VAL_II]], i10* [[COERCE_DIVE]], align 2
// CHECK-LLVMIR-NEXT:    call void @_ZN10archgenlib6detail12evaluateImplINS_11FixedNumberINS_11FixedFormatILi2ELin1EjEEEELi0ENS_5AddOpINS_5SinOpINS_8VariableINS2_INS3_ILi4ELin5EiEEEELm0EEEEENS_4PiOpEEEJSA_EEEvRT_DpRT2_(%"struct.archgenlib::FixedNumber.0"* noundef nonnull align 1 dereferenceable(1) [[OUT]], %"struct.archgenlib::FixedNumber"* noundef nonnull align 2 dereferenceable(2) [[X]])
// CHECK-LLVMIR-NEXT:    ret void
//
// CHECK-MLIR-LABEL:   func.func public @_ZN10archgenlib6detail12evaluateImplINS_11FixedNumberINS_11FixedFormatILi2ELin1EjEEEELi0ENS_5AddOpINS_5SinOpINS_8VariableINS2_INS3_ILi4ELin5EiEEEELm0EEEEENS_4PiOpEEEJSA_EEEvRT_DpRT2_(
// CHECK-MLIR-SAME:                                                                                                                                                                                                             %[[VAL_0:.*]]: !llvm.ptr<!fixedpt.fixedPt<2, -1, u>>,
// CHECK-MLIR-SAME:                                                                                                                                                                                                             %[[VAL_1:.*]]: !llvm.ptr<!fixedpt.fixedPt<4, -5, s>>) -> i8 {
// CHECK-MLIR:           %[[VAL_2:.*]] = arith.constant 0 : i8
// CHECK-MLIR:           %[[VAL_3:.*]] = llvm.load %[[VAL_1]] : !llvm.ptr<!fixedpt.fixedPt<4, -5, s>>
// CHECK-MLIR:           %[[VAL_4:.*]] = approx.variable %[[VAL_3]] : <4, -5, s>
// CHECK-MLIR:           %[[VAL_5:.*]] = approx.generic "sin"(%[[VAL_4]])
// CHECK-MLIR:           %[[VAL_6:.*]] = approx.generic "pi"()
// CHECK-MLIR:           %[[VAL_7:.*]] = approx.generic "add"(%[[VAL_5]], %[[VAL_6]])
// CHECK-MLIR:           %[[VAL_8:.*]] = approx.evaluate auto_select of %[[VAL_7]] as <2, -1, u>
// CHECK-MLIR:           llvm.store %[[VAL_8]], %[[VAL_0]] : !llvm.ptr<!fixedpt.fixedPt<2, -1, u>>
// CHECK-MLIR:           return %[[VAL_2]] : i8
// CHECK-MLIR:         }
auto test(archgenlib::FixedNumber<archgenlib::FixedFormat<4, -5, signed>> x) {
  archgenlib::FixedNumber<archgenlib::FixedFormat<2, -1, unsigned>> out;
  return archgenlib::detail::evaluateImpl<
    archgenlib::FixedNumber<archgenlib::FixedFormat<2, -1, unsigned>>, 0,
    archgenlib::AddOp<
      archgenlib::SinOp<archgenlib::Variable<
        archgenlib::FixedNumber<archgenlib::FixedFormat<4, -5, signed>>,
        0>>,
      archgenlib::PiOp>>(out, x);
}

// CHECK-LLVMIR-LABEL: @_Z5test2N10archgenlib11FixedNumberINS_11FixedFormatILi4ELin5EiEEEE(
// CHECK-LLVMIR-NEXT:  entry:
// CHECK-LLVMIR-NEXT:    [[X:%.*]] = alloca %"struct.archgenlib::FixedNumber", align 2
// CHECK-LLVMIR-NEXT:    [[OUT:%.*]] = alloca %"struct.archgenlib::FixedNumber.0", align 1
// CHECK-LLVMIR-NEXT:    [[COERCE_DIVE:%.*]] = getelementptr inbounds %"struct.archgenlib::FixedNumber", %"struct.archgenlib::FixedNumber"* [[X]], i32 0, i32 0
// CHECK-LLVMIR-NEXT:    [[COERCE_VAL_II:%.*]] = trunc i16 [[X_COERCE:%.*]] to i10
// CHECK-LLVMIR-NEXT:    store i10 [[COERCE_VAL_II]], i10* [[COERCE_DIVE]], align 2
// CHECK-LLVMIR-NEXT:    call void @_ZN10archgenlib6detail12evaluateImplINS_11FixedNumberINS_11FixedFormatILi2ELin1EjEEEELi0ENS_5AddOpINS_5SinOpINS_8VariableINS2_INS3_ILi4ELin5EiEEEELm0EEEEESC_EEJSA_EEEvRT_DpRT2_(%"struct.archgenlib::FixedNumber.0"* noundef nonnull align 1 dereferenceable(1) [[OUT]], %"struct.archgenlib::FixedNumber"* noundef nonnull align 2 dereferenceable(2) [[X]])
// CHECK-LLVMIR-NEXT:    ret void
//
// CHECK-MLIR-LABEL:   func.func public @_ZN10archgenlib6detail12evaluateImplINS_11FixedNumberINS_11FixedFormatILi2ELin1EjEEEELi0ENS_5AddOpINS_5SinOpINS_8VariableINS2_INS3_ILi4ELin5EiEEEELm0EEEEESC_EEJSA_EEEvRT_DpRT2_(
// CHECK-MLIR-SAME:                                                                                                                                                                                                       %[[VAL_0:.*]]: !llvm.ptr<!fixedpt.fixedPt<2, -1, u>>,
// CHECK-MLIR-SAME:                                                                                                                                                                                                       %[[VAL_1:.*]]: !llvm.ptr<!fixedpt.fixedPt<4, -5, s>>) -> i8 {
// CHECK-MLIR:           %[[VAL_2:.*]] = arith.constant 0 : i8
// CHECK-MLIR:           %[[VAL_3:.*]] = llvm.load %[[VAL_1]] : !llvm.ptr<!fixedpt.fixedPt<4, -5, s>>
// CHECK-MLIR:           %[[VAL_4:.*]] = approx.variable %[[VAL_3]] : <4, -5, s>
// CHECK-MLIR:           %[[VAL_5:.*]] = approx.generic "sin"(%[[VAL_4]])
// CHECK-MLIR:           %[[VAL_6:.*]] = approx.generic "add"(%[[VAL_5]], %[[VAL_5]])
// CHECK-MLIR:           %[[VAL_7:.*]] = approx.evaluate auto_select of %[[VAL_6]] as <2, -1, u>
// CHECK-MLIR:           llvm.store %[[VAL_7]], %[[VAL_0]] : !llvm.ptr<!fixedpt.fixedPt<2, -1, u>>
// CHECK-MLIR:           return %[[VAL_2]] : i8
// CHECK-MLIR:         }
auto test2(archgenlib::FixedNumber<archgenlib::FixedFormat<4, -5, signed>> x) {
  archgenlib::FixedNumber<archgenlib::FixedFormat<2, -1, unsigned>> out;
  return archgenlib::detail::evaluateImpl<
    archgenlib::FixedNumber<archgenlib::FixedFormat<2, -1, unsigned>>, 0,
    archgenlib::AddOp<
      archgenlib::SinOp<archgenlib::Variable<
        archgenlib::FixedNumber<archgenlib::FixedFormat<4, -5, signed>>,
        0>>,
      archgenlib::SinOp<archgenlib::Variable<
        archgenlib::FixedNumber<archgenlib::FixedFormat<4, -5, signed>>,
        0>>>>(out, x);
}

int main() {
}
